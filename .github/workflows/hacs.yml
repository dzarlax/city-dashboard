name: HACS Action

on:
  push:
    branches:
      - main
  pull_request:
  schedule:
    - cron: "0 0 * * *"

jobs:
  hacs:
    name: HACS Validation
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v3"
      - name: HACS validation
        uses: "hacs/action@main"
        with:
          category: "integration"

  version-bump:
    name: Auto Version Bump & Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install jq
        run: sudo apt-get install jq -y

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Read current version
        id: get_version
        run: |
          CURRENT_VERSION=$(jq -r .version custom_components/city_dashboard/manifest.json)
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          NEW_VERSION="$major.$minor.$((patch + 1))"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update manifest.json
        run: |
          jq --arg version "$version" '.version = $version' custom_components/city_dashboard/manifest.json > manifest.tmp.json
          mv manifest.tmp.json custom_components/city_dashboard/manifest.json

      - name: Install dependencies
        run: npm ci

      - name: Build HACS frontend
        run: |
          HACS=true npm run build
          mkdir -p www/community/city_dashboard
          cp -r dist/* www/community/city_dashboard/

      - name: Build frontend
        run: |
          HACS=true npm run build:hacs
          mkdir -p custom_components/city_dashboard/www
          cp -r www/community/city_dashboard/* custom_components/city_dashboard/www/
  
      # Затем готовим HACS-релиз
      - name: Prepare HACS package
        run: |
          # Start fresh with correct structure
          rm -rf hacs-release
          mkdir -p hacs-release/custom_components/city_dashboard
          
          # Copy Python files directly to correct location
          cp custom_components/city_dashboard/__init__.py hacs-release/custom_components/city_dashboard/
          cp custom_components/city_dashboard/manifest.json hacs-release/custom_components/city_dashboard/
          cp custom_components/city_dashboard/config_flow.py hacs-release/custom_components/city_dashboard/
          cp custom_components/city_dashboard/const.py hacs-release/custom_components/city_dashboard/
          
          # Copy translations if they exist
          if [ -d "custom_components/city_dashboard/translations" ]; then
            cp -r custom_components/city_dashboard/translations hacs-release/custom_components/city_dashboard/
          fi
          
          # Copy www directory if it exists
          if [ -d "custom_components/city_dashboard/www" ]; then
            cp -r custom_components/city_dashboard/www hacs-release/custom_components/city_dashboard/
          fi
          
          # Create zip from the content of hacs-release directory
          cd hacs-release/custom_components/
          zip -r ../city_dashboard.zip city_dashboard || echo "Zip creation failed"
          cd ..
          ls -la city_dashboard.zip || echo "Zip file not found"


      - name: Commit version bump
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add custom_components/city_dashboard/manifest.json
          git commit -m "Bump version to ${{ env.version }}"
          git push origin main

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.version }}
          name: "Release v${{ env.version }}"
          body: "Automated release for HACS"
          draft: false
          prerelease: false
          files: |
            hacs-release/custom_components/city_dashboard.zip